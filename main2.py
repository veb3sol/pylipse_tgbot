import asyncio
from contextlib import suppress
from aiogram.exceptions import TelegramBadRequest  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—à–∏–±–∫–∞–º–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery

#–∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤—É
import bord2

token = '6665446931:AAF2haWZeMD8BZdiIR0eJWRZQTVIdGfWFk8'
# token = '6376558301:AAHa1nHkRWa-KWcAoMzaZ-xFq8FiSh8Y1M0'
bot = Bot(token, parse_mode = "HTML")
dp = Dispatcher()

# –Ω–∞–±–æ—Ä —Å–º–∞–π–ª–∏–∫–æ–≤
smiles = [
    ["üçï", "–ø–∏—Ü—Ü–∞ –≥–æ—Ç–æ–≤–∞!"],
    ["üç∫", "–ø–∏–≤–æ —Ö–æ–ª–æ–¥–Ω–æ–µ –ø–æ–¥–∞–Ω–æ!"],
    ["üçâ", "–∞—Ä–±—É–∑ –Ω–∞—Ä–µ–∑–∞–Ω!"],
    ["ü•ù", "–æ–±–æ–∂–∞—é –∫–∏–≤–∏!"],

]

@dp.message(CommandStart())  #CommandStart() - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É start
async def start(message: Message):
    await message.answer("Hello!!!", reply_markup = bord2.main_kb)

# –ª–æ–≥–∏–∫–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ –ø–∞–≥–∏–Ω–∞—Ç–æ—Ä–∞
# @dp.callback_query(bord2.Pagination.filter())  # –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –≤ —Ñ–∏–ª—å—Ç–µ—Ä - –º–æ–∂–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Å–µ –¥–≤–µ –∫–Ω–æ–ø–∫–∏ –í–ø–µ—Ä–µ–¥  –∏ –ù–∞–∑–∞–¥
#@dp.callback_query(bord2.Pagination.filter(F.action == "prev"))  # –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞ –∫–∞–∂–¥—É—é –∫–Ω–æ–ø–∫—É –æ—Ç–¥–µ–ª—å–Ω–æ
@dp.callback_query(bord2.Pagination.filter(F.action.in_(["prev", "next"])))  # –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∫–Ω–æ–ø–æ–∫
async def pagination_handler(call: CallbackQuery, callback_data: bord2.Pagination):
    # callback_data.action  -- —Ç—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ç–µ–∫—Å—Ç prev –∏–ª–∏ next
    # callback_data.page  -- —Ç—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page_num = int(callback_data.page)
    page = page_num - 1 if page_num > 0 else 0
    #!!! —Ç–µ–ª–µ–≥—Ä–∞–º –≤—ã–≤–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É(–µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–Ω–æ–ø–∫—É)

    if callback_data.action == "next":
        page = page_num + 1 if page_num < (len(smiles) - 1) else page_num

    # –º–µ–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–º–∞–π–ª–∏–∫–æ–º –∏—Å—Ö–æ–¥—è –∏–∑ —Ç–æ–≥–æ –Ω–∞ –∫–∞–∫–æ–π –º—ã —Å—Ç—Ä–∞–Ω–∏—á–∫–µ
    # !!! —Ç–µ–ª–µ–≥—Ä–∞–º –≤—ã–≤–∏–¥–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω–æ–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É(–µ—Å–ª–∏ –Ω–∞–∂–∏–º–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –∫–Ω–æ–ø–∫—É)
    with suppress(TelegramBadRequest):      # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ç–µ–ª–µ–≥—Ä–∞–º–∞
        await call.message.edit_text(
            f"{smiles[page][0]} <b>{smiles[page][1]}</b>", # –≤—ã–≤–æ–¥–∏–º –Ω—É–∂–Ω—ã–π —Å–º–∞–π–ª–∏–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–µ–º—É
            reply_markup = bord2.paginator(page),   # –≤—ã–≤–æ–¥–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω—É–∂–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—á–∫–æ–π
        )
    await call.answer() #–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç - –¥–∞–µ–º –ø–æ–Ω—è—Ç—å aiogram —á—Ç–æ –º—ã –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∫–Ω–æ–ø–∫—É

# –ø–æ –ø–æ–≤–æ–¥—É in_()   -- –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message(F.text.lower().in_(["—Ö–∞–π", "—Ö–µ–ª–ª–æ—É", "–ø—Ä–∏–≤–µ—Ç–∏–∫"]))
async def greetings(message: Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–∂–∏—â–µ!!!!")


#–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ —Å –∫–Ω–æ–ø–æ–∫ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é
@dp.message()
async def echo(message: Message):
    msg = message.text.lower()      # –≤—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —Ç–æ–ª—å–∫–æ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    if msg == '—Å—Å—ã–ª–∫–∏':
        await message.answer("–í–æ—Ç –í–∞–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–æ–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏!", reply_markup = bord2.links_kb)
    if msg == '—Å–ø–µ—Ü.–∫–Ω–æ–ø–∫–∏':
        await message.answer("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏!", reply_markup = bord2.spec_kb)
    if msg == '–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä':
        await message.answer("–í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä!", reply_markup = bord2.calc_kb())
    if msg == '—Å–º–∞–π–ª–∏–∫–∏':
        await message.answer(f"{smiles[0][0]} <b>{smiles[0][1]}</b>", reply_markup = bord2.paginator())



async def main():
    await bot.delete_webhook(drop_pending_updates = True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())